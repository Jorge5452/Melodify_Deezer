Que vamos a cambiar:
- Cambiar if a funciones (Modularizacion de codigo)
- SOPORTE A ATENDER A MULTIUSUARIOS
- Optimización de la descarga asíncrona.
- Mejoras en la integración con Telegram.
- Puede detectar a los usuarios

*************************************************************
- Apartado de donacion:
    *Mas descargas
    *Prioridad

    5 usuarios normales en Fila 1 - 2 - 3 - 4 - 5
    1 usuario que dono  en fila 1* - 1 - 2 - 3 - 4 - 5
 ************************************************************

- La publicidad 
- COMANDOS DE ADMINISTRADOR


Mejora de vida:
- Mejorar la experiencia del usuario en comandos.
- Ajustar el logging para mayor claridad.
- Opcion de cambiar a idioma ingles

General:
- Revisión del flujo de descarga y verificación de archivos.
- Optimización y mantenibilidad del código.

Bugs:
- El json esta haciendo doble guardado (Si se mandaba una playlist, se guarda el registro como playlist y luego las canciones en individual )
- Cuando se envía una playlist actualizada que ya existe en el JSON (con una versión anterior), el sistema únicamente procesa o devuelve las canciones de la versión antigua en lugar de la lista actualizada.
- Cuando se envia una playlist que ya existe en el JSON esta no envia la caratula del album/playlist ni su informacion.


 - Modificacion de la libreria
def generatePlaylistItem(dz, link_id, bitrate, playlistAPI=None, playlistTracksAPI=None):
    if not playlistAPI:
        if not str(link_id).isdecimal(): raise InvalidID(f"https://deezer.com/playlist/{link_id}")
        # Get essential playlist info
        try:
            playlistAPI = dz.api.get_playlist(link_id)
        except APIError:
            playlistAPI = None
        # Fallback to gw api if the playlist is private
        if not playlistAPI:
            try:
                userPlaylist = dz.gw.get_playlist_page(link_id)
                playlistAPI = map_user_playlist(userPlaylist['DATA'])
            except GWAPIError as e:
                raise GenerationError(f"https://deezer.com/playlist/{link_id}", str(e)) from e
        # Check if private playlist and owner
        if not playlistAPI.get('public', False) and playlistAPI['creator']['id'] != str(dz.current_user['id']):
            logger.warning("You can't download others private playlists.")
            raise NotYourPrivatePlaylist(f"https://deezer.com/playlist/{link_id}")
    if not playlistTracksAPI:
        playlistTracksAPI = dz.gw.get_playlist_tracks(link_id)
    playlistAPI['various_artist'] = dz.api.get_artist(5080) # Useful for save as compilation
        

    # totalSize = len(playlistTracksAPI)
    # playlistAPI['nb_tracks'] = totalSize
    # collection = []
    # for pos, trackAPI in enumerate(playlistTracksAPI, start=1):
    #     trackAPI = map_track(trackAPI)
    #     if trackAPI['explicit_lyrics']:
    #         playlistAPI['explicit'] = True
    #     if 'track_token' in trackAPI: del trackAPI['track_token']
    #     trackAPI['position'] = pos
    #     collection.append(trackAPI)
    
    
    
    initial_total = len(playlistTracksAPI)
    logger.info(f"Total inicial de canciones: {initial_total}")

    collection = []
    rejected_indices = []
    rejected_count = 0
    position = 1

    # Filtrar tracks inválidos
    filtered_playlist = []
    for idx, trackAPI in enumerate(playlistTracksAPI, 1):
        if not trackAPI:
            logger.warning(f"Track #{idx} ignorada: Track vacía")
            rejected_indices.append(idx)
            rejected_count += 1
            continue
            
        try:
            track = map_track(trackAPI)
            if track['explicit_lyrics']:
                playlistAPI['explicit'] = True
            if 'track_token' in track:
                del track['track_token']
            track['position'] = position
            collection.append(track)
            filtered_playlist.append(track)
            position += 1
        except Exception as e:
            logger.warning(f"Track #{idx} ignorada: {e}")
            rejected_indices.append(idx)
            rejected_count += 1
            continue

    final_total = len(collection)
    logger.info(f"""
    Resumen de la playlist:
    - Total inicial: {initial_total}
    - Tracks rechazados: {rejected_count} en posiciones {rejected_indices}
    - Total final: {final_total}
    """)

    if 'explicit' not in playlistAPI: 
        playlistAPI['explicit'] = False

    # Actualizar playlist con solo tracks válidos
    playlistTracksAPI = filtered_playlist
    print("Antes del return")
    return Collection({
        'type': 'playlist',
        'id': link_id,
        'bitrate': bitrate,
        'title': playlistAPI['title'],
        'artist': playlistAPI['creator']['name'],
        'cover': playlistAPI['picture_small'][:-24] + '/75x75-000000-80-0-0.jpg',
        'explicit': playlistAPI['explicit'],
        'size': final_total,
        'collection': {
            'tracks': collection,
            'playlistAPI': playlistAPI
        }
    })